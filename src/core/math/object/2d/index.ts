import { fromObjectPolar2d as fromPolar, toObjectPolar2d as toPolar } from './conversion/index'
import {
  absObject2d as abs,
  absObject2dX as absX,
  absObject2dY as absY,
  addObject2d as add,
  addObjectScalar2d as addScalar,
  addObjectScalar2dX as addScalarX,
  addObjectScalar2dY as addScalarY,
  addObject2dX as addX,
  addObject2dY as addY,
  ceilObject2d as ceil,
  ceilObject2dX as ceilX,
  ceilObject2dY as ceilY,
  clampObject2d as clamp,
  clampObject2dX as clampX,
  clampObject2dY as clampY,
  divideObject2d as divide,
  divideObjectScalar2d as divideScalar,
  divideObjectScalar2dX as divideScalarX,
  divideObjectScalar2dY as divideScalarY,
  divideObject2dX as divideX,
  divideObject2dY as divideY,
  floorObject2d as floor,
  floorObject2dX as floorX,
  floorObject2dY as floorY,
  fractObject2d as fract,
  fractObject2dX as fractX,
  fractObject2dY as fractY,
  invertObject2d as invert,
  invertObject2dX as invertX,
  invertObject2dY as invertY,
  lerpObject2d as lerp,
  lerpObject2dX as lerpX,
  lerpObject2dY as lerpY,
  maxObject2d as max,
  maxObject2dX as maxX,
  maxObject2dY as maxY,
  minObject2d as min,
  minObject2dX as minX,
  minObject2dY as minY,
  moduloObject2d as modulo,
  moduloObjectScalar2d as moduloScalar,
  moduloObjectScalar2dX as moduloScalarX,
  moduloObjectScalar2dY as moduloScalarY,
  moduloObject2dX as moduloX,
  moduloObject2dY as moduloY,
  multiplyObject2d as multiply,
  multiplyObjectScalar2d as multiplyScalar,
  multiplyObjectScalar2dX as multiplyScalarX,
  multiplyObjectScalar2dY as multiplyScalarY,
  multiplyObject2dX as multiplyX,
  multiplyObject2dY as multiplyY,
  negateObject2d as negate,
  negateObject2dX as negateX,
  negateObject2dY as negateY,
  normizeObject2d as normize,
  projectOntoObject2d as projectOnto,
  roundObject2d as round,
  roundObject2dX as roundX,
  roundObject2dY as roundY,
  scaleObject2d as scale,
  scaleObject2dX as scaleX,
  scaleObject2dY as scaleY,
  subtractObject2d as subtract,
  subtractObjectScalar2d as subtractScalar,
  subtractObjectScalar2dX as subtractScalarX,
  subtractObjectScalar2dY as subtractScalarY,
  subtractObject2dX as subtractX,
  subtractObject2dY as subtractY,
  unitObject2d as unit,
  wrapObject2d as wrap,
  wrapObject2dX as wrapX,
  wrapObject2dY as wrapY,
} from './operation/index'
import {
  angleObject2d as angle,
  angleObjectDegrees2d as angleDegrees,
  crossObject2d as cross,
  directionObject2d as direction,
  distanceObject2d as distance,
  distanceObject2dX as distanceX,
  distanceObject2dY as distanceY,
  dotObject2d as dot,
  horizontalAngleDegreesObject2d as horizontalAngleDegrees,
  horizontalAngleObject2d as horizontalAngle,
  lengthObject2d as length,
  magnitudeObject2d as magnitude,
  normObject2d as norm,
  verticalAngleDegreesObject2d as verticalAngleDegrees,
  verticalAngleObject2d as verticalAngle,
} from './product/index'

// eslint-disable-next-line @typescript-eslint/no-namespace
export {
  abs,
  absX,
  absY,
  add,
  addScalar,
  addScalarX,
  addScalarY,
  addX,
  addY,
  angle,
  angleDegrees,
  ceil,
  ceilX,
  ceilY,
  clamp,
  clampX,
  clampY,
  cross,
  direction,
  distance,
  distanceX,
  distanceY,
  divide,
  divideScalar,
  divideScalarX,
  divideScalarY,
  divideX,
  divideY,
  dot,
  floor,
  floorX,
  floorY,
  fract,
  fractX,
  fractY,
  fromPolar,
  horizontalAngle,
  horizontalAngleDegrees,
  invert,
  invertX,
  invertY,
  length,
  lerp,
  lerpX,
  lerpY,
  magnitude,
  max,
  maxX,
  maxY,
  min,
  minX,
  minY,
  modulo,
  moduloScalar,
  moduloScalarX,
  moduloScalarY,
  moduloX,
  moduloY,
  multiply,
  multiplyScalar,
  multiplyScalarX,
  multiplyScalarY,
  multiplyX,
  multiplyY,
  negate,
  negateX,
  negateY,
  norm,
  normize,
  projectOnto,
  round,
  roundX,
  roundY,
  scale,
  scaleX,
  scaleY,
  subtract,
  subtractScalar,
  subtractScalarX,
  subtractScalarY,
  subtractX,
  subtractY,
  toPolar,
  unit,
  verticalAngle,
  verticalAngleDegrees,
  wrap,
  wrapX,
  wrapY,
}
